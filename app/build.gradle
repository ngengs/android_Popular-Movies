apply plugin: 'com.android.application'

// Signing definition
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = null
if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

// Manifest version information!
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for all build.

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "com.ngengs.android.popularmovies.apps"
        minSdkVersion 16
        //noinspection OldTargetApi
        targetSdkVersion 25
        versionCode((versionMajor * 10000000) + (versionMinor * 100000) + (versionPatch * 100) + versionBuild)
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_RELEASE'])
                storePassword keystoreProperties['STORE_PASSWORD_RELEASE']
                keyAlias keystoreProperties['KEY_ALIAS_RELEASE']
                keyPassword keystoreProperties['KEY_PASSWORD_RELEASE']
            }
        }

        debug {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_DEBUG'])
                storePassword keystoreProperties['STORE_PASSWORD_DEBUG']
                keyAlias keystoreProperties['KEY_ALIAS_DEBUG']
                keyPassword keystoreProperties['KEY_PASSWORD_DEBUG']
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def newName = output.outputFile.name
                    newName = newName.replace("app-", applicationId + "-")
                    newName = newName.replace("-release", "-v" + versionName + "-build." + getBuildDate() + "-release")
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
            debuggable true
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.debug
            }
        }
        buildTypes.each {
            it.buildConfigField 'String', 'API_KEY', API_KEY
        }
    }

    lintOptions {
        warning 'InvalidPackage'
    }
}

static def getBuildDate() {
    def date = new Date().format('yyyyMMdd')
    return date
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.1'
    compile 'com.android.support:cardview-v7:25.3.1'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:design:25.3.1'
    compile 'com.android.support:recyclerview-v7:25.3.1'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    compile 'com.squareup.picasso:picasso:2.5.2'
    testCompile 'junit:junit:4.12'
}
