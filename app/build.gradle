apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

// Signing definition
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = null
if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def versionPropertiesFile = rootProject.file("version.properties")
def versionProperties
if (versionPropertiesFile.exists()) {
    versionProperties = new Properties()
    versionProperties.load(new FileInputStream(versionPropertiesFile))
} else {
    throw new Exception('Version properties file not Found')
}

//Manifest version information!
int versionMajor = versionProperties['VERSION_MAJOR'] as int
int versionMinor = versionProperties['VERSION_MINOR'] as int
int versionPatch = versionProperties['VERSION_PATCH'] as int
int versionBuild = versionProperties['VERSION_BUILD'] as int // always bump build number.

// Config definition
def configPropertiesFile = rootProject.file('config.properties')
def configProperties = null
if (configPropertiesFile.exists()) {
    configProperties = new Properties()
    configProperties.load(new FileInputStream(configPropertiesFile))
} else {
    throw new Exception('Configuration properties file not Found')
}

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        applicationId "com.ngengs.android.popularmovies.apps"
        minSdkVersion rootProject.minSdkVersion
        //noinspection OldTargetApi
        targetSdkVersion rootProject.targetSdkVersion
        versionCode((versionMajor * 10000000) + (versionMinor * 100000) + (versionPatch * 100) + versionBuild)
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        vectorDrawables.useSupportLibrary = true
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

    }

    buildFeatures {
        viewBinding = true
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            outputFileName = "${applicationId}-v${versionName}-build.${getBuildDate()}-${variant.name}.apk"
        }
    }

    signingConfigs {
        release {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_RELEASE'])
                storePassword keystoreProperties['STORE_PASSWORD_RELEASE']
                keyAlias keystoreProperties['KEY_ALIAS_RELEASE']
                keyPassword keystoreProperties['KEY_PASSWORD_RELEASE']
            }
        }

        debug {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_DEBUG'])
                storePassword keystoreProperties['STORE_PASSWORD_DEBUG']
                keyAlias keystoreProperties['KEY_ALIAS_DEBUG']
                keyPassword keystoreProperties['KEY_PASSWORD_DEBUG']
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            buildConfigField 'String', 'API_KEY', configProperties['API_KEY_RELEASE']
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles fileTree(include: ['*.pro'], dir: 'proguards').asList().toArray()
        }
        debug {
            minifyEnabled false
            versionNameSuffix "-debug"
            debuggable true
            buildConfigField 'String', 'API_KEY', configProperties['API_KEY_DEBUG']
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.debug
            }
        }
    }

    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }

    packagingOptions {
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
    }

    lintOptions {
        warning 'InvalidPackage'
    }
}

static def getBuildDate() {
    def date = new Date().format('yyyyMMdd')
    return date
}

task tagCommit {
    doLast {
        println "Tag for version: ${versionMajor}.${versionMinor}.${versionPatch}"
        exec {
            commandLine 'git', 'tag', '-a', "v${versionMajor}.${versionMinor}.${versionPatch}", '-m', "'Release version ${versionMajor}.${versionMinor}.${versionPatch}'"
        }
    }
}

task checkVersion {
    doLast {
        println "Version: ${versionMajor}.${versionMinor}.${versionPatch}"
    }
}

task updateMajor {
    doLast {
        println "Bump Major version..."
        println "Preparing data..."
        println "From:\t${versionMajor}"
        versionMajor = versionMajor + 1
        versionMinor = 0
        versionPatch = 0
        versionBuild = versionBuild + 1
        println "To:\t${versionMajor}"
        println "Version target:\t${versionMajor}.${versionMinor}.${versionPatch}"
        writeUpdateVersion(versionMajor, versionMinor, versionPatch, versionBuild)
    }
}

task updateMinor {
    doLast {
        println "Bump Minor version..."
        println "Preparing data..."
        println "From:\t${versionMinor}"
        versionMinor = versionMinor + 1
        versionPatch = 0
        versionBuild = versionBuild + 1
        println "To:\t${versionMinor}"
        println "Version target:\t${versionMajor}.${versionMinor}.${versionPatch}"
        writeUpdateVersion(versionMajor, versionMinor, versionPatch, versionBuild)
    }
}

task updatePatch {
    doLast {
        println "Bump Patch version..."
        println "Preparing data..."
        println "From:\t${versionPatch}"
        versionPatch = versionPatch + 1
        versionBuild = versionBuild + 1
        println "To:\t${versionPatch}"
        println "Version target:\t${versionMajor}.${versionMinor}.${versionPatch}"
        writeUpdateVersion(versionMajor, versionMinor, versionPatch, versionBuild)
    }
}

void writeUpdateVersion(int major, int minor, int patch, int build) {
    println "Updating data..."
    def file = rootProject.file("version.properties")
    file.text = """# Use gradle task instead touch this file
#
# Available command:
# updateMajor
# updateMinor
# updatePatch
#
# Version order in application will be MAJOR.MINOR.PATCH and BUILD is for counter only
# Update time: ${new Date()}
VERSION_MAJOR=${major}
VERSION_MINOR=${minor}
VERSION_PATCH=${patch}
VERSION_BUILD=${build}
"""
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.7.0'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'com.google.code.gson:gson:2.10'
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'
    implementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation 'com.squareup.picasso:picasso:2.8'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation "androidx.room:room-runtime:$roomVersion"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    // To use Kotlin annotation processing tool (kapt)
    kapt "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion"

    testImplementation 'junit:junit:4.13.2'
}